# Generated by Django 2.2 on 2021-05-16 20:30

import django.contrib.auth.models
from django.db import migrations, models
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [

    ]

    operations = [
        migrations.CreateModel(
            name='Cart',
            fields=[
                ('cid', models.AutoField(primary_key=True, serialize=False)),
                ('c_food_num', models.IntegerField()),
                ('c_is_select', models.IntegerField()),
            ],
            options={
                'db_table': 'cart',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Foods',
            fields=[
                ('fid', models.AutoField(primary_key=True, serialize=False)),
                ('food_name', models.CharField(max_length=255)),
                ('food_price', models.FloatField()),
                ('food_describe', models.CharField(max_length=255)),
                ('sell_num', models.IntegerField(default=0)),
                ('food_img', models.CharField(max_length=255)),
            ],
            options={
                'db_table': 'foods',
                'ordering': ['fid'],
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Order',
            fields=[
                ('oid', models.AutoField(primary_key=True, serialize=False)),
                ('o_price', models.FloatField()),
                ('o_time', models.DateTimeField(auto_now=True)),
                ('o_status', models.IntegerField()),
            ],
            options={
                'db_table': 'order',
                'ordering': ['-o_time'],
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Orderfoods',
            fields=[
                ('ofid', models.AutoField(primary_key=True, serialize=False)),
                ('of_food_num', models.IntegerField()),
            ],
            options={
                'db_table': 'orderfoods',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Type',
            fields=[
                ('tid', models.AutoField(primary_key=True, serialize=False)),
                ('type_name', models.CharField(max_length=32)),
            ],
            options={
                'db_table': 'type',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('uid', models.AutoField(primary_key=True, serialize=False)),
                ('username', models.CharField(max_length=20, unique=True)),
                ('password', models.CharField(max_length=200)),
                ('email', models.EmailField(max_length=200, unique=True)),
                ('phone', models.IntegerField(blank=True, null=True)),
                ('sex', models.IntegerField(blank=True, null=True)),
                ('is_active', models.IntegerField(default=0)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'db_table': 'user',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
